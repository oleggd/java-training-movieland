<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="getMovieAllSQL" class="java.lang.String">
        <constructor-arg value="SELECT m.id, m.name, m.name_orig, m.year, m.country, m.rating, m.price, m.creation_date, p.url FROM movies m JOIN posters p ON m.id = p.movie_id"/>
    </bean>
    <bean id="getMovieRandomSQL" class="java.lang.String">
        <constructor-arg value="SELECT m.id, m.name, m.name_orig, m.year, m.country, m.rating, m.price, m.creation_date, p.url FROM movies m JOIN posters p ON m.id = p.movie_id ORDER BY RANDOM() LIMIT ?"/>
    </bean>

    <bean id="getMovieByGenreSQL" class="java.lang.String">
        <constructor-arg value="SELECT m.id, m.name, m.name_orig, m.year, m.country, m.rating, m.price, m.creation_date, p.url, g.name FROM movies m JOIN posters p ON m.id = p.movie_id JOIN movies_genre mg ON mg.movie_id = m.id JOIN genres g ON mg.genre_id = g.id WHERE g.id = ?"/>
    </bean>

    <bean id="getGenreAllSQL" class="java.lang.String">
        <constructor-arg value="SELECT g.id, g.name, g.creation_date FROM genres g"/>
    </bean>

</beans>

